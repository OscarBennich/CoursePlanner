@model CoursePlanner.Models.Teacher

@{
    ViewBag.Title = Model.TeacherName;
}

<div class="row">
    <div class="col-md-3">
        <!-- Profile Image -->
        <div class="box box-danger">
            <div class="box-body box-profile">
                <h3 class="profile-username text-center">@Html.DisplayFor(model => model.TeacherName)</h3>
                <p class="text-muted text-center">@Html.DisplayFor(model => model.TeacherPosition)</p>
                <ul class="list-group list-group-unbordered">
                    <li class="list-group-item">
                        <b>Contract type</b> <a class="pull-right">@Html.DisplayFor(model => model.TeacherContractType)</a>
                    </li>
                    @if (Model.FixedContractEndDate != null)
                    {
                        <li class="list-group-item">
                            <b>Contract end date</b> <a class="pull-right">@Model.FixedContractEndDate.Value.ToString("yyyy/MM/dd")</a>
                        </li>
                    }
                    <li class="list-group-item">
                        <b>Total percentage fall</b> <a class="pull-right">@Convert.ToDouble(Model.TotalPercentageFall.Value * 100)%</a>
                    </li>
                    <li class="list-group-item">
                        <b>Total percentage spring</b> <a class="pull-right">@Convert.ToDouble(Model.TotalPercentageSpring.Value * 100)%</a>
                    </li>
                    <li class="list-group-item">
                        <b>Base annual working hours</b> <a class="pull-right">@ViewBag.BaseAnnualWorkingHours</a>
                    </li>                    
                </ul>
            </div>
            <!-- /.box-body -->
        </div>
        <div class="box box-danger" style="visibility: hidden">
            <div class="box-header with-border">
                <h3 class="box-title">Distribution of total work hours</h3>
            </div>
            <div class="box-body">
                <canvas id="pieChart2" style="height:250px"></canvas>
                <ul class="list-group list-group-unbordered">
                    <li class="list-group-item">
                        <b>Total teaching hours</b> <a class="pull-right">1200</a>
                    </li>
                    <li class="list-group-item">
                        <b>Research hours</b> <a class="pull-right">650</a>
                    </li>
                    <li class="list-group-item">
                        <b>Administrative</b> <a class="pull-right">500</a>
                    </li>
                    <li class="list-group-item">
                        <b>Other</b> <a class="pull-right">100</a>
                    </li>
                </ul>
            </div>
            <!-- /.box-body -->
        </div>
        <div class="box box-danger">
            <div class="box-header with-border">
                <h3 class="box-title">Distribution of teaching hours</h3>
            </div>
            <div class="box-body">
                <canvas id="pieChart" style="height:250px"></canvas>
                <ul class="list-group list-group-unbordered">
                    <li class="list-group-item">
                        <b>Total available hours for spring</b> <a class="pull-right">@ViewBag.TeachingHoursAvailableFall</a>
                    </li>
                    <li class="list-group-item">
                        <b>Allocated hours for fall</b> <a class="pull-right">@ViewBag.TeachingHoursAllocatedFall</a>
                    </li>
                    <li class="list-group-item">
                        <b>Total available hours for spring</b> <a class="pull-right">@ViewBag.TeachingHoursAvailableSpring</a>
                    </li>
                    <li class="list-group-item">
                        <b>Allocated hours for spring</b> <a class="pull-right">@ViewBag.TeachingHoursAllocatedSpring</a>
                    </li>
                </ul>
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
    </div>
    <!-- /.col -->
    <div class="col-md-9  skin-red-light">
        <div class="nav-tabs-custom  skin-red-light">
            <ul class="nav nav-tabs skin-red-light">
                <li class="active skin-red-light"><a href="#fall" data-toggle="tab">Fall Term</a></li>
                <li><a href="#spring" data-toggle="tab">Spring Term</a></li>
                <li><a href="#year" data-toggle="tab">Hours During Year</a></li>
                <li><a href="#history" data-toggle="tab">History</a></li>

            </ul>
            <div class="tab-content">
                <div class="active tab-pane" id="fall">
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="box box-danger">
                                <!-- /.box-header -->
                                <div class="box-body">
                                    <table class="table table-bordered table-hover" id="courseoverview">
                                        <thead>
                                            <tr>
                                                <th>
                                                    Course Code
                                                </th>
                                                <th>
                                                    Course Name
                                                </th>
                                                <th>
                                                    Amount of hours
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (CoursePlanner.Models.CourseOccurrence c in (List<CoursePlanner.Models.CourseOccurrence>)ViewBag.CourseOccurencesFall)
                                            {
                                                <tr>
                                                    <td>
                                                        @c.Course.CourseCode
                                                    </td>
                                                    <td>
                                                        <a href="@Url.Action("Details/" + @c.CourseID, "Course")"><span>@c.Course.CourseName</span></a>
                                                    </td>
                                                    <td>
                                                        @c.CourseTeacher.Where(x => x.CourseOccurrenceId == c.CourseOccurrenceID && x.TeacherId == Model.TeacherId).Select(y => y.Hours).FirstOrDefault()
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <!-- /.box-body -->
                            </div>
                            <!-- /.box -->
                        </div>
                        <!--/.col-xs-12-->
                    </div>
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="spring">
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="box box-danger">
                                <!-- /.box-header -->
                                <div class="box-body">
                                    <table class="table table-bordered table-hover" id="courseoverview">
                                        <thead>
                                            <tr>
                                                <th>
                                                    Course Code
                                                </th>
                                                <th>
                                                    Course Name
                                                </th>
                                                <th>
                                                    Amount of hours
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (CoursePlanner.Models.CourseOccurrence c in (List<CoursePlanner.Models.CourseOccurrence>)ViewBag.CourseOccurencesSpring)
                                            {
                                                <tr>
                                                    <td>
                                                        @c.Course.CourseCode
                                                    </td>
                                                    <td>
                                                        <a href="@Url.Action("Details/" + @c.CourseID, "Course")"><span>@c.Course.CourseName</span></a>
                                                    </td>
                                                    <td>
                                                        @c.CourseTeacher.Where(x => x.CourseOccurrenceId == c.CourseOccurrenceID && x.TeacherId == Model.TeacherId).Select(y => y.Hours).FirstOrDefault()
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <!-- /.box-body -->
                            </div>
                            <!-- /.box -->
                        </div>
                        <!--/.col-xs-12-->
                    </div>
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="year">

                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="history">

                </div>
            </div>
            <!-- /.tab-content -->
        </div>
        <!-- /.nav-tabs-custom -->
    </div>
    <!-- /.col -->
</div>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>

@section PieCharts{
    <script>
    $(document).ready(function () {

        //-------------
        //- PIE CHART -
        //-------------
        // Get context with jQuery - using jQuery's .get() method.
        var pieChartCanvas = $('#pieChart').get(0).getContext('2d')
        var pieChart = new Chart(pieChartCanvas)
        var PieData = [
          {
              value: @ViewBag.TeachingHoursAvailableFall,
              color: '#f56954',
              highlight: '#f56954',
              label: 'Available Hours Fall'
          },
          {
              value: @ViewBag.TeachingHoursAvailableSpring,
              color: '#00a65a',
              highlight: '#00a65a',
              label: 'Available Hours Spring'
          },
          {
              value: @ViewBag.TeachingHoursAllocatedFall,
              color: '#f39c12',
              highlight: '#f39c12',
              label: 'Available Hours Fall'
          },
          {
              value: @ViewBag.TeachingHoursAllocatedSpring,
              color: '#00c0ef',
              highlight: '#00c0ef',
              label: 'Allocated Hours Spring'
          }
        ]
        var pieOptions = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: '#fff',
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: 'easeOutBounce',
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
        }
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        pieChart.Doughnut(PieData, pieOptions)


        var pieChartCanvas2 = $('#pieChart2').get(0).getContext('2d')
        var pieChart2 = new Chart(pieChartCanvas2)
        var PieData2 = [
          {
              value: 650,
              color: '#f56954',
              highlight: '#f56954',
              label: 'Research hours'
          },
          {
              value: 500,
              color: '#00a65a',
              highlight: '#00a65a',
              label: 'Administrative hours'
          },
          {
              value: 1200,
              color: '#f39c12',
              highlight: '#f39c12',
              label: 'Teaching hours'
          },
          {
              value: 100,
              color: '#00c0ef',
              highlight: '#00c0ef',
              label: 'Other'
          }
        ]
        var pieOptions2 = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: '#fff',
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: 'easeOutBounce',
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
        }
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        pieChart2.Doughnut(PieData2, pieOptions2)


    });
    </script>
}