@model CoursePlanner.Models.Teacher

@{
    ViewBag.Title = Model.TeacherName;
}

<p>
    <input type="button" class="btn btn-danger btn-sm" value="Back To List" onclick="location.href='@Url.Action(" index", "Teacher" )'" />
</p>
<div class="row">
    <div class="col-md-4">
        <!-- Profile Image -->
        <div class="box box-danger">
            <div class="box-body box-profile">
                <h3 class="profile-username text-center">@Html.DisplayFor(model => model.TeacherName)</h3>
                <p class="text-muted text-center">@Html.DisplayFor(model => model.TeacherPosition)</p>
                <ul class="list-group list-group-unbordered">
                    <li class="list-group-item">
                        <b>Contract type</b> <a class="pull-right">@Html.DisplayFor(model => model.TeacherContractType)</a>
                    </li>
                    @if (Model.FixedContractEndDate != null)
                    {
                        <li class="list-group-item">
                            <b>Contract end date</b> <a class="pull-right">@Model.FixedContractEndDate.Value.ToString("yyyy/MM/dd")</a>
                        </li>
                    }
                    <li class="list-group-item">
                        <b>Total percentage fall</b> <a class="pull-right">@Convert.ToDouble(Model.TotalPercentageFall.Value * 100)%</a>
                    </li>
                    <li class="list-group-item">
                        <b>Total percentage spring</b> <a class="pull-right">@Convert.ToDouble(Model.TotalPercentageSpring.Value * 100)%</a>
                    </li>
                    <li class="list-group-item">
                        <b>Base annual working hours</b> <a class="pull-right">@ViewBag.BaseAnnualWorkingHours</a>
                    </li>
                    @if (User.IsInRole("Study Director"))
                    {
                        <li class="list-group-item">
                            <b style="font-size: 1.5em;">&nbsp;</b>

                            <button class="btn btn-danger btn-sm pull-right" type="button" onclick="location.href='@Url.Action(" create", "CourseTeacher" , new { tid=@Model.TeacherId })'"> Allocate teacher to courses </button>

                        </li>
                    }
                </ul>
            </div>
            <!-- /.box-body -->
        </div>
    </div>
    <div class="col-md-8  skin-red-light">
        <div class="nav-tabs-custom  skin-red-light">
            <ul class="nav nav-tabs skin-red-light">
                <li class="active skin-red-light"><a href="#fall" data-toggle="tab">Fall Term</a></li>
                <li><a href="#spring" data-toggle="tab">Spring Term</a></li>
                <li><a href="#year" data-toggle="tab">Hours During Year</a></li>
                <li><a href="#history" data-toggle="tab">History</a></li>
                <li><a href="#comments" data-toggle="tab">Comments</a></li>

            </ul>
            <div class="tab-content">
                <div class="active tab-pane" id="fall">
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="box box-danger">
                                <!-- /.box-header -->
                                <div class="box-body">
                                    <table class="table table-bordered table-hover" id="courseoverview">
                                        <thead>
                                            <tr>
                                                <th>
                                                    Course Code
                                                </th>
                                                <th>
                                                    Course Name
                                                </th>
                                                <th>
                                                    Amount of hours
                                                </th>
                                                <th>
                                                    Course responsible
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (CoursePlanner.Models.CourseOccurrence c in (List<CoursePlanner.Models.CourseOccurrence>)ViewBag.CourseOccurencesFall)
                                            {
                                                <tr>
                                                    <td>
                                                        @c.Course.CourseCode
                                                    </td>
                                                    <td>
                                                        <a href="@Url.Action(" details />" + @c.CourseOccurrenceID, "CourseOccurrence")"><span>@c.Course.CourseName</span></a>
                                                    </td>
                                                    <td>
                                                        @c.CourseTeacher.Where(x => x.CourseOccurrenceId == c.CourseOccurrenceID && x.TeacherId == Model.TeacherId).Select(y => y.Hours).FirstOrDefault()
                                                    </td>
                                                    <td>
                                                        <a href="@Url.Action(" details />" + @c.CourseResponsibleID, "Teacher")">
                                                            @if (ViewBag.GetCourseResponsibleName(Convert.ToInt32(c.CourseResponsibleID)) != null)
                                                            {
                                                                @Html.ViewBag.GetCourseResponsibleName(Convert.ToInt32(c.CourseResponsibleID))
                                                            }
                                                            else
                                                            {
                                                                <p class="center">No course responsible</p>
                                                            }
                                                        </a>

                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <!-- /.box-body -->
                            </div>
                            <!-- /.box -->
                        </div>
                        <!--/.col-xs-12-->
                    </div>

                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="spring">
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="box box-danger">
                                <!-- /.box-header -->
                                <div class="box-body">
                                    <table class="table table-bordered table-hover" id="courseoverview">
                                        <thead>
                                            <tr>
                                                <th>
                                                    Course Code
                                                </th>
                                                <th>
                                                    Course Name
                                                </th>
                                                <th>
                                                    Amount of hours
                                                </th>
                                                <th>
                                                    Course responsible
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (CoursePlanner.Models.CourseOccurrence c in (List<CoursePlanner.Models.CourseOccurrence>)ViewBag.CourseOccurencesSpring)
                                            {
                                                <tr>
                                                    <td>
                                                        @c.Course.CourseCode
                                                    </td>
                                                    <td>
                                                        <a href="@Url.Action(" details />" + @c.CourseID, "CourseOccurrence")"><span>@c.Course.CourseName</span></a>
                                                    </td>
                                                    <td>
                                                        @c.CourseTeacher.Where(x => x.CourseOccurrenceId == c.CourseOccurrenceID && x.TeacherId == Model.TeacherId).Select(y => y.Hours).FirstOrDefault()
                                                    </td>
                                                    <td>
                                                        <a href="@Url.Action(" details />" + @c.CourseResponsibleID, "Teacher")">
                                                            @if (ViewBag.GetCourseResponsibleName(Convert.ToInt32(c.CourseResponsibleID)) != null)
                                                            {
                                                                @Html.ViewBag.GetCourseResponsibleName(Convert.ToInt32(c.CourseResponsibleID))
                                                            }
                                                            else
                                                            {
                                                                <p class="center">No course responsible</p>
                                                            }
                                                        </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <!-- /.box-body -->
                            </div>
                            <!-- /.box -->
                        </div>
                        <!--/.col-xs-12-->
                    </div>
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="year">
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="history">
                </div>
                <div class="tab-pane" id="comments">
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="box-body" id="chat-box">
                                <h4>Public comments:</h4>
                                @foreach (CoursePlanner.Models.Comment c in ViewBag.publicComments)
                                {
                                    <div class="box box-danger">
                                        <div class="box-body">
                                            <b>Comment: </b><br />
                                            @c.BaseMessage.MessageText
                                            @if (User.IsInRole("Study Director"))
                                            {
                                                <button class="btn btn-danger btn-sm pull-right" type="button" onclick="location.href='@Url.Action("DeleteComment", "Teacher", new { toDeleteComment = @c.BaseMessageID })'"> Remove</button>
                                            }
                                        </div>
                                    </div>
                                }
                                <h4>Private comments:</h4>
                                @foreach (CoursePlanner.Models.Comment c in ViewBag.privateComments)
                                {
                                    <div class="box box-danger">
                                        <div class="box-body">
                                            <b>Comment: </b><br />
                                            @c.BaseMessage.MessageText
                                            @if (User.IsInRole("Study Director"))
                                            {
                                                <button class="btn btn-danger btn-sm pull-right" type="button" onclick="location.href='@Url.Action("DeleteComment", "Teacher", new { toDeleteComment = @c.BaseMessageID })'"> Remove</button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            <!-- /.box-body -->
                            <div class="box-footer">
                                @if (User.IsInRole("Study Director"))
                                {
                                    <h4>Add comment:</h4>
                                    using (Html.BeginForm("CreateComment", "Teacher"))
                                    {
                                        @Html.AntiForgeryToken()
                                        <fieldset id="createCommentForm">
                                            <input hidden value="@Model.TeacherId" name="receiverId" />
                                            <input hidden value="33" name="senderId" />
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <input type="checkbox" name="publicComment" checked value="true" onclick="this.value = this.checked;"> Public
                                                </span>
                                                <input type="text" value="" class="form-control" name="messageText" placeholder="Type comment..." required />
                                                <div class="input-group-btn">

                                                    <input class="btn btn-success" value="Comment" type="submit"  />

                                                </div>
                                            </div>
                                        </fieldset>
                                    }                                
                                }                                                              
                            </div>

                        </div>
                        <!--/.col-xs-12-->
                    </div>
                    <!--/.row-->
                </div>
            </div>
            <!-- /.tab-content -->
        </div>
        <!-- /.nav-tabs-custom -->
        <div class="box box-danger">
            <div class="box-header with-border">
                <h3 class="box-title">Yearly workload distribution</h3>
                <div class="pull-right">

                    <i class="fa fa-circle-o text-blue"></i>
                    Current workload

                    <i class="fa fa-circle-o text-green"></i>
                    Expected workload

                </div>
            </div>
            <div class="box-body">
                <div class="chart">
                    <canvas id="PeriodChart" style="height:250px"></canvas>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
    </div>
</div>
<div class="row">
    <div class="col-md-3">
        <div class="box box-danger">
            <div class="box-header with-border">
                <h3 class="box-title">Distribution of fall teaching hours</h3>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="chart-responsive">
                        <canvas id="DistributionFallPieChart" style="height:250px"></canvas>
                    </div>
                </div><br />

                <div class="box-footer no-padding">
                    <ul class="nav nav-pills nav-stacked">
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-green"></i>Total available hours for fall
                                <span class="pull-right text-black">@ViewBag.TeachingHoursAvailableFall</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-aqua"></i>
                                Allocated hours for fall
                                <span class="pull-right text-black">@ViewBag.TeachingHoursAllocatedFall</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-blue"></i>
                                Remaining hours for fall
                                <span class="pull-right text-black">@(ViewBag.TeachingHoursAvailableFall - ViewBag.TeachingHoursAllocatedFall)</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
    </div>
    <div class="col-md-3">
        <div class="box box-danger">
            <div class="box-header with-border">
                <h3 class="box-title">Distribution of reductions for fall</h3>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="chart-responsive">
                        <canvas id="ReductionFallPieChart" style="height:250px"></canvas>
                    </div>
                </div><br />

                <div class="box-footer">
                    <ul class="nav nav-pills nav-stacked">
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-red"></i>
                                Fall teaching hours
                                <span class="pull-right text-black">@ViewBag.TotalTeachingHoursFall</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-green"></i>
                                Research<span class="pull-right text-black">@ViewBag.TotalHoursAllocatedResearchFall</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-yellow"></i>
                                Administrative
                                <span class="pull-right text-black">@ViewBag.TotalHoursAllocatedAdministrationFall</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-aqua"></i>
                                Assignments
                                <span class="pull-right text-black">@ViewBag.TotalHoursAllocatedAssignmentsFall</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-gray"></i>
                                Other
                                <span class="pull-right text-black">@ViewBag.TotalHoursAllocatedOtherFall</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
    </div>
    <div class="col-md-3">
        <div class="box box-danger">
            <div class="box-header with-border">
                <h3 class="box-title">Distribution of spring teaching hours</h3>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="chart-responsive">
                        <canvas id="DistributionSpringPieChart" style="height:250px"></canvas>
                    </div>
                </div><br />

                <div class="box-footer no-padding">
                    <ul class="nav nav-pills nav-stacked">
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-green"></i>
                                Total available hours for spring
                                <span class="pull-right text-black">@ViewBag.TeachingHoursAvailableSpring</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-aqua"></i>
                                Allocated hours for spring
                                <span class="pull-right text-black">@ViewBag.TeachingHoursAllocatedSpring</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-blue"></i>
                                Remaining hours for spring
                                <span class="pull-right text-black">@(ViewBag.TeachingHoursAvailableSpring - ViewBag.TeachingHoursAllocatedSpring)</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
    </div>
    <div class="col-md-3">
        <div class="box box-danger">
            <div class="box-header with-border">
                <h3 class="box-title">Distribution of reductions for spring</h3>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="chart-responsive">
                        <canvas id="ReductionSpringPieChart" style="height:250px"></canvas>
                    </div>
                </div><br />

                <div class="box-footer">
                    <ul class="nav nav-pills nav-stacked">
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-red"></i>
                                Spring teaching hours
                                <span class="pull-right text-black">@ViewBag.TotalTeachingHoursSpring</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-green"></i>
                                Research<span class="pull-right text-black">@ViewBag.TotalHoursAllocatedResearchSpring</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-yellow"></i>
                                Administrative
                                <span class="pull-right text-black">@ViewBag.TotalHoursAllocatedAdministrationSpring</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-aqua"></i>
                                Assignments
                                <span class="pull-right text-black">@ViewBag.TotalHoursAllocatedAssignmentsSpring</span>
                            </a>
                        </li>
                        <li>
                            <a href="javascript:void()" style="cursor:default">
                                <i class="fa fa-circle-o text-gray"></i>
                                Other
                                <span class="pull-right text-black">@ViewBag.TotalHoursAllocatedOtherSpring</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
    </div>

</div>
<!-- /.col (RIGHT) -->
<!-- /.row -->
<!-- /.box -->
@section PieCharts{
    <script>
$(document).ready(function () {

        //-------------
        //- PIE CHART -
        //-------------
        // Get context with jQuery - using jQuery's .get() method.
        var pieChartCanvas = $('#DistributionFallPieChart').get(0).getContext('2d')

        var allocatedFall = (@ViewBag.TeachingHoursAvailableFall - @ViewBag.TeachingHoursAllocatedFall)

        if(allocatedFall < 0)
        {
            allocatedFall = 0
        }


        var pieChart = new Chart(pieChartCanvas)
        var PieData = [
            {
                value: @ViewBag.TeachingHoursAvailableFall,
                color: '#00a65a',
                highlight: '#00a65a',
                label: 'Available Hours Fall'
            },
            {
                value: @ViewBag.TeachingHoursAllocatedFall,
                color: '#00c0ef',
                highlight: '#00c0ef',
                label: 'Allocated Hours Fall'
            },
            {
                value: allocatedFall,
                color: '#4D8FAC',
                highlight: '#4D8FAC',
                label: 'Remaining Hours Fall'
            }
        ]
        var pieOptions = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: '#fff',
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: 'easeOutBounce',
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
        }
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        pieChart.Doughnut(PieData, pieOptions)
    });
	
	$(document).ready(function () {

        //-------------
        //- PIE CHART -
        //-------------
        // Get context with jQuery - using jQuery's .get() method.
        var pieChartCanvas = $('#DistributionSpringPieChart').get(0).getContext('2d')

        var allocatedSpring = (@ViewBag.TeachingHoursAvailableSpring - @ViewBag.TeachingHoursAllocatedSpring)


        if(allocatedSpring < 0)
        {
            allocatedSpring = 0
        }


        var pieChart = new Chart(pieChartCanvas)
        var PieData = [
            {
                value: @ViewBag.TeachingHoursAvailableSpring,
                color: '#00a65a',
                highlight: '#00a65a',
                label: 'Available Hours Spring'
            },
            {
                value: @ViewBag.TeachingHoursAllocatedSpring,
                color: '#00c0ef',
                highlight: '#00c0ef',
                label: 'Allocated Hours Spring'
            },
            {
                value: allocatedSpring,
                color: '#4D8FAC',
                highlight: '#4D8FAC',
                label: 'Remaining Hours Spring'
            }
        ]
        var pieOptions = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: '#fff',
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: 'easeOutBounce',
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
        }
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        pieChart.Doughnut(PieData, pieOptions)
    });
	
	$(document).ready(function () {

        //-------------
        //- PIE CHART -
        //-------------
        // Get context with jQuery - using jQuery's .get() method.
        var fallPieChartCanvas = $('#ReductionFallPieChart').get(0).getContext('2d')
        var fallpieChart = new Chart(fallPieChartCanvas)
        var fallPieData = [
        {
            value: @ViewBag.TotalTeachingHoursFall,
            color: '#f56954',
            highlight: '#f56954',
            label: 'Teaching Hours'
        },
		{
			value: @ViewBag.TotalHoursAllocatedResearchFall,
			color: '#00a65a',
			highlight: '#00a65a',
			label: 'Research'
		},
		{
			value: @ViewBag.TotalHoursAllocatedAdministrationFall,
			color: '#f39c12',
			highlight: '#f39c12',
			label: 'Administration'
		},
		{
			value: @ViewBag.TotalHoursAllocatedAssignmentsFall,
			color: '#00c0ef',
			highlight: '#00c0ef',
			label: 'Assignments'
		},
		{
			value: @ViewBag.TotalHoursAllocatedOtherFall,
			color: '#D0D7DD',
			highlight: '#D0D7DD',
			label: 'Other'
		}
        ]
        var fallpieOptions = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: '#fff',
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: 'easeOutBounce',
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
        }
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        fallpieChart.Doughnut(fallPieData, fallpieOptions)
    });
	
	$(document).ready(function () {

        //-------------
        //- PIE CHART -
        //-------------
        // Get context with jQuery - using jQuery's .get() method.
        var springPieChartCanvas = $('#ReductionSpringPieChart').get(0).getContext('2d')
        var springpieChart = new Chart(springPieChartCanvas)
        var springPieData = [
            {
                value: @ViewBag.TotalTeachingHoursSpring,
                color: '#f56954',
                highlight: '#f56954',
                label: 'Teaching Hours'
            },
            {
                value: @ViewBag.TotalHoursAllocatedResearchSpring,
                color: '#00a65a',
                highlight: '#00a65a',
                label: 'Research'
            },
            {
                value: @ViewBag.TotalHoursAllocatedAdministrationSpring,
                color: '#f39c12',
                highlight: '#f39c12',
                label: 'Administration'
            },
            {
                value: @ViewBag.TotalHoursAllocatedAssignmentsSpring,
                color: '#00c0ef',
                highlight: '#00c0ef',
                label: 'Assignments'
            },
            {
                value: @ViewBag.TotalHoursAllocatedOtherSpring,
                color: '#D0D7DD',
                highlight: '#D0D7DD',
                label: 'Other'
            }
        ]
        var springpieOptions = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: '#fff',
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: 'easeOutBounce',
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
        }
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        springpieChart.Doughnut(springPieData, springpieOptions)
    });

	
	$(document).ready(function () {

                    //-------------
                    //- BAR CHART -
                    //-------------
                    var periodChartCanvas = $("#PeriodChart").get(0).getContext("2d")
                    var periodChart = new Chart(periodChartCanvas)
                    var periodChartData = {
                        labels: ["Period 1 Fall", "Period 2 Fall", "Period 3 Fall", "Period 4 Fall", "Period 1 Spring", "Period 2 Spring", "Period 3 Spring","Period 4 Spring"],
                        datasets: [
                            {
                                label: "Current workload",
                                fillColor: "rgba(60,141,188,0.9)",
                                strokeColor: "rgba(60,141,188,0.8)",
                                pointColor: "#3b8bba",
                                pointStrokeColor: "rgba(60,141,188,1)",
                                pointHighlightFill: "#fff",
                                pointHighlightStroke: "rgba(60,141,188,1)",
                                data: [@ViewBag.Period1,@ViewBag.Period2,@ViewBag.Period3,@ViewBag.Period4,@ViewBag.Period5,@ViewBag.Period6,@ViewBag.Period7,@ViewBag.Period8]
                            },
                            {
                                label: "Expected workload",
                                fillColor: "rgba(210, 214, 222, 1)",
                                strokeColor: "rgba(210, 214, 222, 1)",
                                pointColor: "rgba(210, 214, 222, 1)",
                                pointStrokeColor: "#c1c7d1",
                                pointHighlightFill: "#fff",
                                pointHighlightStroke: "rgba(220,220,220,1)",
                                data: [@ViewBag.ExpectedPeriodHours, @ViewBag.ExpectedPeriodHours, @ViewBag.ExpectedPeriodHours, @ViewBag.ExpectedPeriodHours, @ViewBag.ExpectedPeriodHours, @ViewBag.ExpectedPeriodHours, @ViewBag.ExpectedPeriodHours,@ViewBag.ExpectedPeriodHours]
                            }

                        ]
                    }
                    periodChartData.datasets[1].fillColor = "#00a65a"
                    periodChartData.datasets[1].strokeColor = "#00a65a"
                    periodChartData.datasets[1].pointColor = "#00a65a"
                    var periodChartOptions = {
                        //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                        scaleBeginAtZero: true,
                        //Boolean - Whether grid lines are shown across the chart
                        scaleShowGridLines: false,
                        //String - Colour of the grid lines
                        scaleGridLineColor: "rgba(0,0,0,.05)",
                        //Number - Width of the grid lines
                        scaleGridLineWidth: 1,
                        //Boolean - Whether to show horizontal lines (except X axis)
                        scaleShowHorizontalLines: true,
                        //Boolean - Whether to show vertical lines (except Y axis)
                        scaleShowVerticalLines: true,
                        //Boolean - If there is a stroke on each period
                        barShowStroke: true,
                        //Number - Pixel width of the period stroke
                        barStrokeWidth: 2,
                        //Number - Spacing between each of the X value sets
                        barValueSpacing: 5,
                        //Number - Spacing between data sets within X values
                        barDatasetSpacing: 1,
                        //String - A legend template
                        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
                        //Boolean - whether to make the chart responsive
                        responsive: true,
                        maintainAspectRatio: true
                    }

                    periodChartOptions.datasetFill = false
                    periodChart.Bar(periodChartData, periodChartOptions)
                });

    </script>
            }
